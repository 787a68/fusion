name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          check-latest: true

      - name: Check environment
        run: |
          echo "Go version:"
          go version
          echo "Go environment:"
          go env
          echo "System information:"
          uname -a
          echo "Disk space:"
          df -h
          echo "Memory usage:"
          free -h

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Initialize Go module
        run: |
          if [ ! -f go.mod ]; then
            go mod init fusion
          fi
          go mod download
          go mod tidy

      - name: Verify dependencies
        run: |
          go mod verify
          if [ ! -f go.sum ]; then
            echo "::error::go.sum file not found"
            exit 1
          fi

      - name: Check code
        run: |
          echo "Running go vet..."
          go vet ./...
          echo "Running staticcheck..."
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...
          echo "Running golangci-lint..."
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run ./...

      - name: Build
        run: go build -v ./...

      - name: Test
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          go tool cover -func=coverage.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fusion:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}